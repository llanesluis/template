services:
  db:
    container_name: production_postgres_db
    image: postgres:latest
    env_file:
      - ./.env.production
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    container_name: production_migrations
    build:
      context: .
      target: migrations
    env_file:
      - ./.env.production
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my_network
    restart: on-failure

  web:
    container_name: production_web
    build:
      context: .
      target: runner
    ports:
      - "3001:3000"
    env_file:
      - ./.env.production
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_started
    networks:
      - my_network

volumes:
  postgres_data:

networks:
  my_network:
    name: my_network
    driver: bridge
